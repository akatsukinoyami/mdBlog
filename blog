#! /bin/sh

function run() { 
  echo "RUN $*\n"
  eval $*
}
function build(){ 
  # fix permission of blog
  run chown -R $USER public/blog && chmod -R 744 public/blog
  # prepare posts 
  run node ./scripts/preparePosts/index.js
  # build app
  run yarn build
}

case $1 in
  "b" | "build")
    run build
    case $2 in
      "prod")
        # delete old archive
        run rm -f blog.tar.gz
        
        # compress assets
        run node ./scripts/compressor/index.js ./public/build

        # create new archive
        run tar czf blog.tar.gz public captain-definition Dockerfile nginx.conf
      ;;
      "*")
        not_found
      ;;
    esac
  ;;
  "f" | "fix")
    case $2 in
      "permissions")
        # fix permission of blog
        run chown -R $USER public/blog && chmod -R 744 public/blog
      ;;
      "*")
        echo "Command not found, write `$0 help` to see avaliable commands"
      ;;
    esac
  ;;
  "g" | "generate")
    case $2 in
      "post_tree")
        # prepare posts 
        run node ./scripts/preparePosts/index.js
      ;;
      "*")
        echo "Command not found, write `$0 help` to see avaliable commands"
      ;;
    esac
  ;;
  "r" | "run")
    build
    case $2 in
      "")
        run "docker-compose up"
      ;;
      "recreate")
        run "docker-compose up --build --force-recreate"
      ;;
      "*")
        echo "Command not found, write `$0 help` to see avaliable commands"
      ;;
    esac
  ;;
  "help")
    echo "
Avaliable commands:

  b, build              - build application
  b, build prod         - build application in tar.gz for usage in caprover
  f, fix permissions    - fix permissions on public folder
  g, generate post_tree - start script for fetching data about posts
  r, run                - start application in docker
  r, run recreate       - start with --build --force-recreate"
  ;;
  "*")
    echo "Command not found, write `$0 help` to see avaliable commands"
  ;;
esac
